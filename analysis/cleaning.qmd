---
title: "Data Analysis"
author: Christina Trinh
format: html
editor: visual
---

# Analysis

# Data Cleaning

## Load Assets

```{r}
library(tidyverse)
library(readxl)
library(writexl)



net_jobs <- read_excel("../data/all_variables_data.xlsx", sheet = "net_jobs")

info_net_jobs <- read_excel("../data/all_variables_data.xlsx", sheet = "info_net_jobs")
employment <- read_excel("../data/all_variables_data.xlsx", sheet = "employment")
info_employment <- read_excel("../data/all_variables_data.xlsx", sheet = "info_employment")
firm_deaths <- read_excel("../data/all_variables_data.xlsx", sheet = "firm_deaths")


patents <- read_excel("../data/all_variables_data.xlsx", sheet = "patents")
venture_capital <- read_excel("../data/all_variables_data.xlsx", sheet = "venture_capital")
edu_investment <- read_excel("../data/all_variables_data.xlsx", sheet = "edu_investment")
bach_degrees <- read_excel("../data/all_variables_data.xlsx", sheet = "bach_degrees")

gdp <- read_excel("../data/all_variables_data.xlsx", sheet = "gdp")
population <- read_excel("../data/all_variables_data.xlsx", sheet = "pop")

```

## Reformat Tibbles

```{r}
patents <- patents |>
  pivot_longer(cols = 2:26, values_to = "patents", names_to = "year") |>
  mutate(year = as.numeric(year))

venture_capital <- venture_capital |>
  pivot_longer(cols = 2:21, values_to = "venture_capital", names_to = "year") |>
  mutate(year = as.numeric(year))

bach_degrees <- bach_degrees |>
  pivot_longer(cols = 2:26, values_to = "bach_degrees", names_to = "year") |>
  mutate(year = as.numeric(year))

gdp <- gdp |>
  pivot_longer(cols = 2:29, values_to = "gdp", names_to = "year") |>
  mutate(year = as.numeric(year), gdp = gdp * 1000000)

#gdp_per_capita <- gdp_per_capita |>
 # pivot_longer(cols = 2:5, values_to = "gdp_per_capita", names_to = "year") |>
  #mutate(year = as.numeric(year))

population <- population |>
  pivot_longer(cols = 2:26, values_to = "population", names_to = "year") |>
  mutate(year = as.numeric(year))
```

## Join Data Tables

```{r}
#dataset including all variables for all years 1996-2020
full_v1 <- venture_capital |>
  left_join(patents, join_by(state, year)) |>
  left_join(firm_deaths, join_by(state, year)) |>
  left_join(bach_degrees, join_by(state, year)) |>
  left_join(net_jobs, join_by(state, year)) |>
  left_join(edu_investment, join_by(state, year)) |>
  left_join(info_net_jobs, join_by(state, year)) |>
  left_join(info_employment, join_by(state, year)) |>
  left_join(employment, join_by(state, year)) |>
  left_join(gdp, join_by(state, year)) |>
 # left_join(gdp_per_capita, join_by(state, year)) |>
  left_join(population, join_by(state, year)) |>
  mutate(gdp_per_capita = gdp/population) |>
  mutate(across(2:14, ~na_if(.x, 0)))
```

```{r}
#dataset including all variables for only the endpoint years
full_v2 <- full_v1 |>
  filter(year %in% c(1996,2001,2010,2015))

era1 <- full_v1 |>
  filter(year %in% c(1996,2001))

era2 <- full_v1 |>
  filter(year %in% c(2010,2015))

era1_wide <- era1 |>
  pivot_longer(cols = -c(state, year),  # Keep state and year, pivot the rest
               names_to = "variable", 
               values_to = "value") |>
  mutate(variable_year = paste0(variable, "_", year)) |>
  select(-year, -variable) |>
  pivot_wider(names_from = variable_year, values_from = value)

era2_wide <- era2 |>
  pivot_longer(cols = -c(state, year),  # Keep state and year, pivot the rest
               names_to = "variable", 
               values_to = "value") |>
  mutate(variable_year = paste0(variable, "_", year)) |>
  select(-year, -variable) |>
  pivot_wider(names_from = variable_year, values_from = value)

#dataset where each variable for each year is a column
full_v3 <- full_v2 |>
  pivot_longer(cols = -c(state, year),  # Keep state and year, pivot the rest
               names_to = "variable", 
               values_to = "value") |>
  mutate(variable_year = paste0(variable, "_", year)) |>
  select(-year, -variable) |>
  pivot_wider(names_from = variable_year, values_from = value)


```

```{r}
pc_era_1 <- era1_wide |>
  mutate(vc_pc=(venture_capital_2001-venture_capital_1996)/venture_capital_1996,
         patents_pc=((patents_2001-patents_1996)/patents_1996),
         firm_death_pc=((firm_deaths_2001-firm_deaths_1996)/firm_deaths_1996),
         bach_degrees_pc=(bach_degrees_2001-bach_degrees_1996)/bach_degrees_1996,
         net_jobs_pc=(net_jobs_2001-net_jobs_1996)/net_jobs_1996,
         edu_investment_pc=(edu_investment_2001-edu_investment_1996)/edu_investment_1996,
         info_net_jobs_pc=(info_net_jobs_2001-info_net_jobs_1996)/info_net_jobs_1996,
         employment_pc=(employment_2001-employment_1996)/employment_1996,
         gdp_pc=(gdp_2001-gdp_1996)/gdp_1996,
         gdp_per_capita_pc=(gdp_per_capita_2001-gdp_per_capita_1996)/gdp_per_capita_1996,
         population_pc=(population_2001-population_1996)/population_1996,
         info_employment_pc=(info_employment_2001-info_employment_1996)/info_employment_1996) |>
    mutate(across(2:14, ~na_if(.x, 0)))


pc_era_1 <- pc_era_1 |>
  mutate_all(~ifelse(is.nan(.), NA, .))
pc_era_1[sapply(pc_era_1, is.infinite)] <- NA


pc_era_2 <- era2_wide |> 
  mutate(vc_pc=(venture_capital_2015-venture_capital_2010)/venture_capital_2010,
         patents_pc=((patents_2015-patents_2010)/patents_2010),
         firm_death_pc=((firm_deaths_2015-firm_deaths_2010)/firm_deaths_2010),
         bach_degrees_pc=(bach_degrees_2015-bach_degrees_2010)/bach_degrees_2010,
         net_jobs_pc=(net_jobs_2015-net_jobs_2010)/net_jobs_2010,
         edu_investment_pc=(edu_investment_2015-edu_investment_2010)/edu_investment_2010,
         info_net_jobs_pc=(info_net_jobs_2015-info_net_jobs_2010)/info_net_jobs_2010,
         employment_pc=(employment_2015-employment_2010)/employment_2010,
         gdp_pc=(gdp_2015-gdp_2010)/gdp_2010,
         gdp_per_capita_pc=(gdp_per_capita_2015-gdp_per_capita_2010)/gdp_per_capita_2010,
         population_pc=(population_2015-population_2010)/population_2010,
         info_employment_pc=(info_employment_2015-info_employment_2010)/info_employment_2010) |>
    mutate(across(2:14, ~na_if(.x, 0)))


pc_era_2 <- pc_era_2 %>% 
  mutate_all(~ifelse(is.nan(.), NA, .))
pc_era_2[sapply(pc_era_2, is.infinite)] <- NA
```

## Create Excel Spreadsheets

```{r}
write_xlsx(full_v1, path = "../data/timeseries.xlsx")
write_xlsx(full_v2, path = "../data/full_sheet.xlsx")
write_xlsx(full_v3, path = "../data/final_sheet.xlsx")
write_xlsx(pc_era_1, path = "../data/era1_pc.xlsx")
write_xlsx(pc_era_2, path = "../data/era2_pc.xlsx")

```
